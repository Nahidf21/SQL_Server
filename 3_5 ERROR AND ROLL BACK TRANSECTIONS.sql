-- Transaction 
select * from dbo.JOB;

Begin Transaction 
	update dbo.JOB
	set JOB_NAME = 'DATA ANALYST2'
	where JOB_ID = 669
-- COMMIT
ROLLBACK TRANSACTION

select * from dbo.JOB;

-- IF WE USE TRANSACTION AND NOT USE COMMIT THEN WE CAN ROLL BACK OUR TRANSECTIONS 
-- USING ROLLBACK COMMENT

-- ERROR HANDELING 
DECLARE @X INT;
DECLARE @Y INT;
SET @X = 1;
SET @Y = 0;

BEGIN TRY
	PRINT( @X / @Y)
END TRY

BEGIN CATCH 
	PRINT ( 'THIS IS AN ERROR, PLEASE CHECK THE INPUT VARIABLES. YOUR VARIABLES ARE 
	X = '+ CAST(@X AS CHAR)+'AND Y =' + CAST(@Y AS CHAR))
END CATCH


-- TABLE VARIABLE
-- CREATE A TEMP TABLE 
CREATE TABLE DBO.#MOVIES 
	(
	MOVIES INT,
	TITLE VARCHAR (100),
	YEAR DATE
	)

-- INSERT DATA INTO TEMP TABLE

INSERT into dbo.#Movies
values (1,'Braveheart','2002')

select * 
from dbo.#Movies;

-- DROP THE TABLE 
DROP TABLE DBO.#MOVIES;

-- TABLE VARIABLE 

DECLARE @MOVIES TABLE 
	( MOVIES_ID INT,
	MOVIES_NAME VARCHAR(15),
	YEAR_NAME DATE)

INSERT INTO @MOVIES 
VALUES (123, 'NEW MOVIES', '2025'),
       (124, 'OLD MOVIES', '2024')

SELECT * FROM @MOVIES;

-- DRIVE TABLE 

SELECT 
	TITLE, 
	FIRSTNAME, 
	LASTNAME, 
	MIDDLENAME,
	SUFFIX, 
	EMAILPROMOTION, 
	MODIFIEDDATE
FROM 
( SELECT * FROM [Person].[Person] 
	WHERE LASTNAME = 'Ford') 
	AS DERIVED_TABLE_PERSON 


-- VIEWS 

SELECT * FROM Production.Product;
SELECT DISTINCT(COLOR) FROM Production.Product; 

SELECT 
	COLOR, 
	COUNT(*) TOTAL_PRODUCTS , 
	AVG(ListPrice) AVG_PRICE ,
	SUM(ListPrice) TOTAL_PRICE
FROM 
	Production.Product
WHERE COLOR IS NOT NULL
GROUP BY Color
ORDER BY COUNT(*)  DESC ;
GO

alter VIEW PRODUCT_SUMMERY_BY_CPLORS 
AS 
SELECT 
	COLOR, 
	COUNT(*) TOTAL_PRODUCTS , 
	AVG(ListPrice) AVG_PRICE ,
	SUM(ListPrice) TOTAL_PRICE
FROM 
	Production.Product
WHERE COLOR IS NOT NULL
GROUP BY Color
--ORDER BY COUNT(*)  DESC ;

SELECT * FROM PRODUCT_SUMMERY_BY_CPLORS
ORDER BY TOTAL_PRODUCTS DESC;


GO 

SELECT 
	COLOR, 
	COUNT(*) TOTAL_PRODUCTS , 
	AVG(ListPrice) AVG_PRICE ,
	SUM(ListPrice) TOTAL_PRICE
	INTO #TEMP_CTG
FROM 
	Production.Product
WHERE COLOR IS NOT NULL
GROUP BY Color
ORDER BY COUNT(*)  DESC ;

SELECT * FROM #TEMP_CTG;


